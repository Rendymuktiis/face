{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmitterInstance = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst EmitterSize_1 = require(\"./Options/Classes/EmitterSize\");\n\nclass EmitterInstance {\n  constructor(emitters, container, emitterOptions, position) {\n    var _a, _b, _c;\n\n    this.emitters = emitters;\n    this.container = container;\n    this.initialPosition = position;\n    this.emitterOptions = Utils_1.Utils.deepExtend({}, emitterOptions);\n    this.position = (_a = this.initialPosition) !== null && _a !== void 0 ? _a : this.calcPosition();\n    let particlesOptions = Utils_1.Utils.deepExtend({}, this.emitterOptions.particles);\n\n    if (particlesOptions === undefined) {\n      particlesOptions = {};\n    }\n\n    if (particlesOptions.move === undefined) {\n      particlesOptions.move = {};\n    }\n\n    if (particlesOptions.move.direction === undefined) {\n      particlesOptions.move.direction = this.emitterOptions.direction;\n    }\n\n    this.particlesOptions = particlesOptions;\n    this.size = (_b = this.emitterOptions.size) !== null && _b !== void 0 ? _b : (() => {\n      const size = new EmitterSize_1.EmitterSize();\n      size.load({\n        height: 0,\n        mode: Enums_1.SizeMode.percent,\n        width: 0\n      });\n      return size;\n    })();\n    this.lifeCount = (_c = this.emitterOptions.life.count) !== null && _c !== void 0 ? _c : -1;\n    this.immortal = this.lifeCount <= 0;\n    this.play();\n  }\n\n  play() {\n    if (this.lifeCount > 0 || this.immortal || !this.emitterOptions.life.count) {\n      if (this.startInterval === undefined) {\n        this.startInterval = window.setInterval(() => {\n          this.emit();\n        }, 1000 * this.emitterOptions.rate.delay);\n      }\n\n      if (this.lifeCount > 0 || this.immortal) {\n        this.prepareToDie();\n      }\n    }\n  }\n\n  pause() {\n    const interval = this.startInterval;\n\n    if (interval !== undefined) {\n      clearInterval(interval);\n      delete this.startInterval;\n    }\n  }\n\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n\n  prepareToDie() {\n    var _a;\n\n    const duration = (_a = this.emitterOptions.life) === null || _a === void 0 ? void 0 : _a.duration;\n\n    if ((this.lifeCount > 0 || this.immortal) && duration !== undefined && duration > 0) {\n      window.setTimeout(() => {\n        var _a;\n\n        this.pause();\n\n        if (!this.immortal) {\n          this.lifeCount--;\n        }\n\n        if (this.lifeCount > 0 || this.immortal) {\n          this.position = this.calcPosition();\n          window.setTimeout(() => {\n            this.play();\n          }, ((_a = this.emitterOptions.life.delay) !== null && _a !== void 0 ? _a : 0) * 1000);\n        } else {\n          this.destroy();\n        }\n      }, duration * 1000);\n    }\n  }\n\n  destroy() {\n    this.emitters.removeEmitter(this);\n  }\n\n  calcPosition() {\n    var _a;\n\n    const container = this.container;\n    const percentPosition = (_a = this.emitterOptions.position) !== null && _a !== void 0 ? _a : {\n      x: Math.random() * 100,\n      y: Math.random() * 100\n    };\n    return {\n      x: percentPosition.x / 100 * container.canvas.size.width,\n      y: percentPosition.y / 100 * container.canvas.size.height\n    };\n  }\n\n  emit() {\n    const container = this.container;\n    const position = this.position;\n    const offset = {\n      x: this.size.mode === Enums_1.SizeMode.percent ? container.canvas.size.width * this.size.width / 100 : this.size.width,\n      y: this.size.mode === Enums_1.SizeMode.percent ? container.canvas.size.height * this.size.height / 100 : this.size.height\n    };\n\n    for (let i = 0; i < this.emitterOptions.rate.quantity; i++) {\n      container.particles.addParticle({\n        x: position.x + offset.x * (Math.random() - 0.5),\n        y: position.y + offset.y * (Math.random() - 0.5)\n      }, this.particlesOptions);\n    }\n  }\n\n}\n\nexports.EmitterInstance = EmitterInstance;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/udemy react/face-frontEnd/face/node_modules/tsparticles/dist/Plugins/Emitters/EmitterInstance.js"],"names":["Object","defineProperty","exports","value","EmitterInstance","Utils_1","require","Enums_1","EmitterSize_1","constructor","emitters","container","emitterOptions","position","_a","_b","_c","initialPosition","Utils","deepExtend","calcPosition","particlesOptions","particles","undefined","move","direction","size","EmitterSize","load","height","mode","SizeMode","percent","width","lifeCount","life","count","immortal","play","startInterval","window","setInterval","emit","rate","delay","prepareToDie","pause","interval","clearInterval","resize","isPointInside","canvas","duration","setTimeout","destroy","removeEmitter","percentPosition","x","Math","random","y","offset","i","quantity","addParticle"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EmitterInstance = void 0;\r\nconst Utils_1 = require(\"../../Utils\");\r\nconst Enums_1 = require(\"../../Enums\");\r\nconst EmitterSize_1 = require(\"./Options/Classes/EmitterSize\");\r\nclass EmitterInstance {\r\n    constructor(emitters, container, emitterOptions, position) {\r\n        var _a, _b, _c;\r\n        this.emitters = emitters;\r\n        this.container = container;\r\n        this.initialPosition = position;\r\n        this.emitterOptions = Utils_1.Utils.deepExtend({}, emitterOptions);\r\n        this.position = (_a = this.initialPosition) !== null && _a !== void 0 ? _a : this.calcPosition();\r\n        let particlesOptions = Utils_1.Utils.deepExtend({}, this.emitterOptions.particles);\r\n        if (particlesOptions === undefined) {\r\n            particlesOptions = {};\r\n        }\r\n        if (particlesOptions.move === undefined) {\r\n            particlesOptions.move = {};\r\n        }\r\n        if (particlesOptions.move.direction === undefined) {\r\n            particlesOptions.move.direction = this.emitterOptions.direction;\r\n        }\r\n        this.particlesOptions = particlesOptions;\r\n        this.size = (_b = this.emitterOptions.size) !== null && _b !== void 0 ? _b : (() => {\r\n            const size = new EmitterSize_1.EmitterSize();\r\n            size.load({\r\n                height: 0,\r\n                mode: Enums_1.SizeMode.percent,\r\n                width: 0,\r\n            });\r\n            return size;\r\n        })();\r\n        this.lifeCount = (_c = this.emitterOptions.life.count) !== null && _c !== void 0 ? _c : -1;\r\n        this.immortal = this.lifeCount <= 0;\r\n        this.play();\r\n    }\r\n    play() {\r\n        if (this.lifeCount > 0 || this.immortal || !this.emitterOptions.life.count) {\r\n            if (this.startInterval === undefined) {\r\n                this.startInterval = window.setInterval(() => {\r\n                    this.emit();\r\n                }, 1000 * this.emitterOptions.rate.delay);\r\n            }\r\n            if (this.lifeCount > 0 || this.immortal) {\r\n                this.prepareToDie();\r\n            }\r\n        }\r\n    }\r\n    pause() {\r\n        const interval = this.startInterval;\r\n        if (interval !== undefined) {\r\n            clearInterval(interval);\r\n            delete this.startInterval;\r\n        }\r\n    }\r\n    resize() {\r\n        const initialPosition = this.initialPosition;\r\n        this.position =\r\n            initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size)\r\n                ? initialPosition\r\n                : this.calcPosition();\r\n    }\r\n    prepareToDie() {\r\n        var _a;\r\n        const duration = (_a = this.emitterOptions.life) === null || _a === void 0 ? void 0 : _a.duration;\r\n        if ((this.lifeCount > 0 || this.immortal) && duration !== undefined && duration > 0) {\r\n            window.setTimeout(() => {\r\n                var _a;\r\n                this.pause();\r\n                if (!this.immortal) {\r\n                    this.lifeCount--;\r\n                }\r\n                if (this.lifeCount > 0 || this.immortal) {\r\n                    this.position = this.calcPosition();\r\n                    window.setTimeout(() => {\r\n                        this.play();\r\n                    }, ((_a = this.emitterOptions.life.delay) !== null && _a !== void 0 ? _a : 0) * 1000);\r\n                }\r\n                else {\r\n                    this.destroy();\r\n                }\r\n            }, duration * 1000);\r\n        }\r\n    }\r\n    destroy() {\r\n        this.emitters.removeEmitter(this);\r\n    }\r\n    calcPosition() {\r\n        var _a;\r\n        const container = this.container;\r\n        const percentPosition = (_a = this.emitterOptions.position) !== null && _a !== void 0 ? _a : {\r\n            x: Math.random() * 100,\r\n            y: Math.random() * 100,\r\n        };\r\n        return {\r\n            x: (percentPosition.x / 100) * container.canvas.size.width,\r\n            y: (percentPosition.y / 100) * container.canvas.size.height,\r\n        };\r\n    }\r\n    emit() {\r\n        const container = this.container;\r\n        const position = this.position;\r\n        const offset = {\r\n            x: this.size.mode === Enums_1.SizeMode.percent\r\n                ? (container.canvas.size.width * this.size.width) / 100\r\n                : this.size.width,\r\n            y: this.size.mode === Enums_1.SizeMode.percent\r\n                ? (container.canvas.size.height * this.size.height) / 100\r\n                : this.size.height,\r\n        };\r\n        for (let i = 0; i < this.emitterOptions.rate.quantity; i++) {\r\n            container.particles.addParticle({\r\n                x: position.x + offset.x * (Math.random() - 0.5),\r\n                y: position.y + offset.y * (Math.random() - 0.5),\r\n            }, this.particlesOptions);\r\n        }\r\n    }\r\n}\r\nexports.EmitterInstance = EmitterInstance;\r\n"]},"metadata":{},"sourceType":"script"}