{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst Updater_1 = require(\"./Particle/Updater\");\n\nconst Particles_1 = require(\"../Options/Classes/Particles/Particles\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Infecter_1 = require(\"./Particle/Infecter\");\n\nconst Mover_1 = require(\"./Particle/Mover\");\n\nclass Particle {\n  constructor(container, position, overrideOptions) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.container = container;\n    this.fill = true;\n    this.close = true;\n    this.links = [];\n    this.lastNoiseTime = 0;\n    this.destroyed = false;\n    const options = container.options;\n    const particlesOptions = new Particles_1.Particles();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        const shapeData = shapeOptions.options[this.shape];\n\n        if (shapeData) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\n        }\n      }\n    } else {\n      const shapeData = particlesOptions.shape.options[this.shape];\n\n      if (shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\n      }\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.particlesOptions = particlesOptions;\n    const noiseDelay = this.particlesOptions.move.noise.delay;\n    this.noiseDelay = (noiseDelay.random.enable ? Utils_1.Utils.randomInRange(noiseDelay.random.minimumValue, noiseDelay.value) : noiseDelay.value) * 1000;\n    container.retina.initParticle(this);\n    const color = this.particlesOptions.color;\n    const sizeValue = (_g = this.sizeValue) !== null && _g !== void 0 ? _g : container.retina.sizeValue;\n    const randomSize = typeof this.particlesOptions.size.random === \"boolean\" ? this.particlesOptions.size.random : this.particlesOptions.size.random.enable;\n    this.size = {\n      value: randomSize && this.randomMinimumSize !== undefined ? Utils_1.Utils.randomInRange(this.randomMinimumSize, sizeValue) : sizeValue\n    };\n    this.direction = this.particlesOptions.move.direction;\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = {\n      horizontal: this.initialVelocity.horizontal,\n      vertical: this.initialVelocity.vertical\n    };\n    const rotateOptions = this.particlesOptions.rotate;\n    const degAngle = rotateOptions.random ? Math.random() * 360 : rotateOptions.value;\n    this.angle = degAngle * Math.PI / 180;\n    this.pathAngle = Math.atan2(this.initialVelocity.vertical, this.initialVelocity.horizontal);\n    this.rotateDirection = rotateOptions.direction;\n\n    if (this.rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      this.rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    const sizeAnimation = this.particlesOptions.size.animation;\n\n    if (sizeAnimation.enable) {\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          if (!randomSize) {\n            const pxRatio = container.retina.pixelRatio;\n            this.size.value = sizeAnimation.minimumValue * pxRatio;\n          }\n\n          break;\n      }\n\n      this.size.status = Enums_1.SizeAnimationStatus.increasing;\n      this.size.velocity = ((_h = this.sizeAnimationSpeed) !== null && _h !== void 0 ? _h : container.retina.sizeAnimationSpeed) / 100;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.color = Utils_1.ColorUtils.colorToHsl(color);\n    const colorAnimation = this.particlesOptions.color.animation;\n\n    if (colorAnimation.enable) {\n      this.colorVelocity = colorAnimation.speed / 100;\n\n      if (!colorAnimation.sync) {\n        this.colorVelocity = this.colorVelocity * Math.random();\n      }\n    } else {\n      this.colorVelocity = 0;\n    }\n\n    if (colorAnimation.enable && !colorAnimation.sync && this.color) {\n      this.color.h = Math.random() * 360;\n    }\n\n    this.position = this.calcPosition(this.container, position);\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n\n    if (this.particlesOptions.collisions.enable && !this.checkOverlap(position)) {\n      throw new Error();\n    }\n\n    const opacityOptions = this.particlesOptions.opacity;\n    const randomOpacity = opacityOptions.random;\n    const opacityValue = opacityOptions.value;\n    this.opacity = {\n      value: randomOpacity.enable ? Utils_1.Utils.randomInRange(randomOpacity.minimumValue, opacityValue) : opacityValue\n    };\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.OpacityAnimationStatus.increasing;\n      this.opacity.velocity = opacityAnimation.speed / 100;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    const imageShape = this.loadImageShape(container, drawer);\n\n    if (imageShape) {\n      this.image = imageShape.image;\n      this.fill = imageShape.fill;\n      this.close = imageShape.close;\n    }\n\n    this.stroke = this.particlesOptions.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke) : this.particlesOptions.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    this.strokeColor = Utils_1.ColorUtils.colorToHsl(this.stroke.color);\n\n    if (typeof this.stroke.color !== \"string\") {\n      const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        if (strokeColorAnimation.enable) {\n          this.strokeColorVelocity = colorAnimation.speed / 100;\n\n          if (!strokeColorAnimation.sync) {\n            this.strokeColorVelocity = this.strokeColorVelocity * Math.random();\n          }\n        } else {\n          this.strokeColorVelocity = 0;\n        }\n\n        if (strokeColorAnimation.enable && !strokeColorAnimation.sync && this.color) {\n          this.strokeColor.h = Math.random() * 360;\n        }\n      }\n    }\n\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);\n    this.updater = new Updater_1.Updater(container, this);\n    this.infecter = new Infecter_1.Infecter(container, this);\n    this.mover = new Mover_1.Mover(container, this);\n  }\n\n  move(delta) {\n    this.mover.move(delta);\n  }\n\n  update(delta) {\n    this.updater.update(delta);\n  }\n\n  draw(delta) {\n    this.container.canvas.drawParticle(this, delta);\n  }\n\n  isOverlapping() {\n    const container = this.container;\n    let collisionFound = false;\n    const pos1 = this.getPosition();\n\n    for (const p2 of container.particles.array.filter(t => t != this)) {\n      const pos2 = p2.getPosition();\n      const dist = Utils_1.Utils.getDistance(pos1, pos2);\n\n      if (dist <= this.size.value + p2.size.value) {\n        collisionFound = true;\n        break;\n      }\n    }\n\n    return collisionFound;\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y\n    };\n  }\n\n  getFillColor() {\n    var _a;\n\n    return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color;\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.strokeColor) !== null && _b !== void 0 ? _b : this.color;\n  }\n\n  destroy() {\n    this.destroyed = true;\n  }\n\n  checkOverlap(position, iterations = 0) {\n    const container = this.container;\n\n    if (!container.particles.count) {\n      return true;\n    }\n\n    if (iterations >= container.particles.count) {\n      return false;\n    }\n\n    const overlapping = this.isOverlapping();\n\n    if (overlapping) {\n      this.position.x = position ? position.x : Math.random() * container.canvas.size.width;\n      this.position.y = position ? position.y : Math.random() * container.canvas.size.height;\n      return this.checkOverlap(undefined, iterations + 1);\n    }\n\n    return true;\n  }\n\n  calcPosition(container, position) {\n    var _a, _b;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Utils_1.Utils.deepExtend({}, pluginPos);\n      }\n    }\n\n    const pos = {\n      x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\n      y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height\n    };\n    const outMode = this.particlesOptions.move.outMode;\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n\n    return pos;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = Utils_1.Utils.getParticleBaseVelocity(this);\n    const res = {\n      horizontal: 0,\n      vertical: 0\n    };\n    const moveOptions = this.particlesOptions.move;\n    let rad;\n    let radOffset = Math.PI / 4;\n\n    if (typeof moveOptions.angle === \"number\") {\n      rad = Math.PI / 180 * moveOptions.angle;\n    } else {\n      rad = Math.PI / 180 * moveOptions.angle.value;\n      radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    }\n\n    const range = {\n      left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\n      right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2)\n    };\n\n    if (moveOptions.straight) {\n      res.horizontal = baseVelocity.x;\n      res.vertical = baseVelocity.y;\n\n      if (moveOptions.random) {\n        res.horizontal += Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n        res.vertical += Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n      }\n    } else {\n      res.horizontal = baseVelocity.x + Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n      res.vertical = baseVelocity.y + Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n    }\n\n    return res;\n  }\n\n  loadImageShape(container, drawer) {\n    var _a, _b, _c, _d, _e;\n\n    if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n      return;\n    }\n\n    const imageDrawer = drawer;\n    const images = imageDrawer.getImages(container).images;\n    const imageData = this.shapeData;\n    const image = (_a = images.find(t => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n    const color = this.getFillColor();\n    let imageRes;\n\n    if (!image) {\n      return;\n    }\n\n    if (image.svgData !== undefined && imageData.replaceColor && color) {\n      const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n      const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      });\n      const domUrl = window.URL || window.webkitURL || window;\n      const url = domUrl.createObjectURL(svg);\n      const img = new Image();\n      imageRes = {\n        data: image,\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n        source: imageData.src\n      };\n      img.addEventListener(\"load\", () => {\n        if (this.image) {\n          this.image.loaded = true;\n          image.element = img;\n        }\n\n        domUrl.revokeObjectURL(url);\n      });\n      img.addEventListener(\"error\", () => {\n        domUrl.revokeObjectURL(url);\n        Utils_1.Utils.loadImage(imageData.src).then(img2 => {\n          if (this.image) {\n            image.element = img2.element;\n            this.image.loaded = true;\n          }\n        });\n      });\n      img.src = url;\n    } else {\n      imageRes = {\n        data: image,\n        loaded: true,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src\n      };\n    }\n\n    if (!imageRes.ratio) {\n      imageRes.ratio = 1;\n    }\n\n    const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n    const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n    return {\n      image: imageRes,\n      fill,\n      close\n    };\n  }\n\n}\n\nexports.Particle = Particle;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/udemy react/face-frontEnd/face/node_modules/tsparticles/dist/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","Updater_1","require","Particles_1","Shape_1","Enums_1","Utils_1","Infecter_1","Mover_1","constructor","container","position","overrideOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","fill","close","links","lastNoiseTime","destroyed","options","particlesOptions","Particles","load","particles","shapeType","shape","type","Array","Utils","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","deepExtend","undefined","noiseDelay","move","noise","delay","random","enable","randomInRange","minimumValue","retina","initParticle","color","sizeValue","randomSize","size","randomMinimumSize","direction","bubble","inRange","initialVelocity","calculateVelocity","velocity","horizontal","vertical","rotateOptions","rotate","degAngle","Math","angle","PI","pathAngle","atan2","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","sizeAnimation","animation","startValue","StartValueType","min","pxRatio","pixelRatio","status","SizeAnimationStatus","increasing","sizeAnimationSpeed","sync","ColorUtils","colorToHsl","colorAnimation","colorVelocity","speed","h","calcPosition","offset","x","y","collisions","checkOverlap","Error","opacityOptions","opacity","randomOpacity","opacityValue","opacityAnimation","OpacityAnimationStatus","drawer","drawers","get","Plugins","getShapeDrawer","set","imageShape","loadImageShape","image","stroke","strokeWidth","width","strokeColor","strokeColorAnimation","strokeColorVelocity","shadowColor","colorToRgb","shadow","updater","Updater","infecter","Infecter","mover","Mover","delta","update","draw","canvas","drawParticle","isOverlapping","collisionFound","pos1","getPosition","p2","array","filter","t","pos2","dist","getDistance","getFillColor","getStrokeColor","destroy","iterations","count","overlapping","height","plugin","plugins","pluginPos","particlePosition","pos","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","range","left","sin","right","cos","straight","ShapeType","images","imageDrawer","getImages","imageData","find","source","src","imageRes","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","window","URL","webkitURL","url","createObjectURL","img","Image","data","loaded","ratio","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Particle = void 0;\r\nconst Updater_1 = require(\"./Particle/Updater\");\r\nconst Particles_1 = require(\"../Options/Classes/Particles/Particles\");\r\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\r\nconst Enums_1 = require(\"../Enums\");\r\nconst Utils_1 = require(\"../Utils\");\r\nconst Infecter_1 = require(\"./Particle/Infecter\");\r\nconst Mover_1 = require(\"./Particle/Mover\");\r\nclass Particle {\r\n    constructor(container, position, overrideOptions) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\r\n        this.container = container;\r\n        this.fill = true;\r\n        this.close = true;\r\n        this.links = [];\r\n        this.lastNoiseTime = 0;\r\n        this.destroyed = false;\r\n        const options = container.options;\r\n        const particlesOptions = new Particles_1.Particles();\r\n        particlesOptions.load(options.particles);\r\n        const shapeType = particlesOptions.shape.type;\r\n        this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType) : shapeType;\r\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\r\n            if (overrideOptions.shape.type) {\r\n                const overrideShapeType = overrideOptions.shape.type;\r\n                this.shape =\r\n                    overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType) : overrideShapeType;\r\n            }\r\n            const shapeOptions = new Shape_1.Shape();\r\n            shapeOptions.load(overrideOptions.shape);\r\n            if (this.shape) {\r\n                const shapeData = shapeOptions.options[this.shape];\r\n                if (shapeData) {\r\n                    this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const shapeData = particlesOptions.shape.options[this.shape];\r\n            if (shapeData) {\r\n                this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\r\n            }\r\n        }\r\n        if (overrideOptions !== undefined) {\r\n            particlesOptions.load(overrideOptions);\r\n        }\r\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\r\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\r\n        }\r\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\r\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\r\n        this.particlesOptions = particlesOptions;\r\n        const noiseDelay = this.particlesOptions.move.noise.delay;\r\n        this.noiseDelay =\r\n            (noiseDelay.random.enable\r\n                ? Utils_1.Utils.randomInRange(noiseDelay.random.minimumValue, noiseDelay.value)\r\n                : noiseDelay.value) * 1000;\r\n        container.retina.initParticle(this);\r\n        const color = this.particlesOptions.color;\r\n        const sizeValue = (_g = this.sizeValue) !== null && _g !== void 0 ? _g : container.retina.sizeValue;\r\n        const randomSize = typeof this.particlesOptions.size.random === \"boolean\"\r\n            ? this.particlesOptions.size.random\r\n            : this.particlesOptions.size.random.enable;\r\n        this.size = {\r\n            value: randomSize && this.randomMinimumSize !== undefined\r\n                ? Utils_1.Utils.randomInRange(this.randomMinimumSize, sizeValue)\r\n                : sizeValue,\r\n        };\r\n        this.direction = this.particlesOptions.move.direction;\r\n        this.bubble = {\r\n            inRange: false,\r\n        };\r\n        this.initialVelocity = this.calculateVelocity();\r\n        this.velocity = {\r\n            horizontal: this.initialVelocity.horizontal,\r\n            vertical: this.initialVelocity.vertical,\r\n        };\r\n        const rotateOptions = this.particlesOptions.rotate;\r\n        const degAngle = rotateOptions.random ? Math.random() * 360 : rotateOptions.value;\r\n        this.angle = (degAngle * Math.PI) / 180;\r\n        this.pathAngle = Math.atan2(this.initialVelocity.vertical, this.initialVelocity.horizontal);\r\n        this.rotateDirection = rotateOptions.direction;\r\n        if (this.rotateDirection === Enums_1.RotateDirection.random) {\r\n            const index = Math.floor(Math.random() * 2);\r\n            this.rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\r\n        }\r\n        const sizeAnimation = this.particlesOptions.size.animation;\r\n        if (sizeAnimation.enable) {\r\n            switch (sizeAnimation.startValue) {\r\n                case Enums_1.StartValueType.min:\r\n                    if (!randomSize) {\r\n                        const pxRatio = container.retina.pixelRatio;\r\n                        this.size.value = sizeAnimation.minimumValue * pxRatio;\r\n                    }\r\n                    break;\r\n            }\r\n            this.size.status = Enums_1.SizeAnimationStatus.increasing;\r\n            this.size.velocity = ((_h = this.sizeAnimationSpeed) !== null && _h !== void 0 ? _h : container.retina.sizeAnimationSpeed) / 100;\r\n            if (!sizeAnimation.sync) {\r\n                this.size.velocity *= Math.random();\r\n            }\r\n        }\r\n        this.color = Utils_1.ColorUtils.colorToHsl(color);\r\n        const colorAnimation = this.particlesOptions.color.animation;\r\n        if (colorAnimation.enable) {\r\n            this.colorVelocity = colorAnimation.speed / 100;\r\n            if (!colorAnimation.sync) {\r\n                this.colorVelocity = this.colorVelocity * Math.random();\r\n            }\r\n        }\r\n        else {\r\n            this.colorVelocity = 0;\r\n        }\r\n        if (colorAnimation.enable && !colorAnimation.sync && this.color) {\r\n            this.color.h = Math.random() * 360;\r\n        }\r\n        this.position = this.calcPosition(this.container, position);\r\n        this.offset = {\r\n            x: 0,\r\n            y: 0,\r\n        };\r\n        if (this.particlesOptions.collisions.enable && !this.checkOverlap(position)) {\r\n            throw new Error();\r\n        }\r\n        const opacityOptions = this.particlesOptions.opacity;\r\n        const randomOpacity = opacityOptions.random;\r\n        const opacityValue = opacityOptions.value;\r\n        this.opacity = {\r\n            value: randomOpacity.enable ? Utils_1.Utils.randomInRange(randomOpacity.minimumValue, opacityValue) : opacityValue,\r\n        };\r\n        const opacityAnimation = opacityOptions.animation;\r\n        if (opacityAnimation.enable) {\r\n            this.opacity.status = Enums_1.OpacityAnimationStatus.increasing;\r\n            this.opacity.velocity = opacityAnimation.speed / 100;\r\n            if (!opacityAnimation.sync) {\r\n                this.opacity.velocity *= Math.random();\r\n            }\r\n        }\r\n        let drawer = container.drawers.get(this.shape);\r\n        if (!drawer) {\r\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\r\n            if (drawer) {\r\n                container.drawers.set(this.shape, drawer);\r\n            }\r\n        }\r\n        const imageShape = this.loadImageShape(container, drawer);\r\n        if (imageShape) {\r\n            this.image = imageShape.image;\r\n            this.fill = imageShape.fill;\r\n            this.close = imageShape.close;\r\n        }\r\n        this.stroke =\r\n            this.particlesOptions.stroke instanceof Array\r\n                ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke)\r\n                : this.particlesOptions.stroke;\r\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\r\n        this.strokeColor = Utils_1.ColorUtils.colorToHsl(this.stroke.color);\r\n        if (typeof this.stroke.color !== \"string\") {\r\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\r\n            if (strokeColorAnimation && this.strokeColor) {\r\n                if (strokeColorAnimation.enable) {\r\n                    this.strokeColorVelocity = colorAnimation.speed / 100;\r\n                    if (!strokeColorAnimation.sync) {\r\n                        this.strokeColorVelocity = this.strokeColorVelocity * Math.random();\r\n                    }\r\n                }\r\n                else {\r\n                    this.strokeColorVelocity = 0;\r\n                }\r\n                if (strokeColorAnimation.enable && !strokeColorAnimation.sync && this.color) {\r\n                    this.strokeColor.h = Math.random() * 360;\r\n                }\r\n            }\r\n        }\r\n        this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);\r\n        this.updater = new Updater_1.Updater(container, this);\r\n        this.infecter = new Infecter_1.Infecter(container, this);\r\n        this.mover = new Mover_1.Mover(container, this);\r\n    }\r\n    move(delta) {\r\n        this.mover.move(delta);\r\n    }\r\n    update(delta) {\r\n        this.updater.update(delta);\r\n    }\r\n    draw(delta) {\r\n        this.container.canvas.drawParticle(this, delta);\r\n    }\r\n    isOverlapping() {\r\n        const container = this.container;\r\n        let collisionFound = false;\r\n        const pos1 = this.getPosition();\r\n        for (const p2 of container.particles.array.filter((t) => t != this)) {\r\n            const pos2 = p2.getPosition();\r\n            const dist = Utils_1.Utils.getDistance(pos1, pos2);\r\n            if (dist <= this.size.value + p2.size.value) {\r\n                collisionFound = true;\r\n                break;\r\n            }\r\n        }\r\n        return collisionFound;\r\n    }\r\n    getPosition() {\r\n        return {\r\n            x: this.position.x + this.offset.x,\r\n            y: this.position.y + this.offset.y,\r\n        };\r\n    }\r\n    getFillColor() {\r\n        var _a;\r\n        return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color;\r\n    }\r\n    getStrokeColor() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.strokeColor) !== null && _b !== void 0 ? _b : this.color;\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n    }\r\n    checkOverlap(position, iterations = 0) {\r\n        const container = this.container;\r\n        if (!container.particles.count) {\r\n            return true;\r\n        }\r\n        if (iterations >= container.particles.count) {\r\n            return false;\r\n        }\r\n        const overlapping = this.isOverlapping();\r\n        if (overlapping) {\r\n            this.position.x = position ? position.x : Math.random() * container.canvas.size.width;\r\n            this.position.y = position ? position.y : Math.random() * container.canvas.size.height;\r\n            return this.checkOverlap(undefined, iterations + 1);\r\n        }\r\n        return true;\r\n    }\r\n    calcPosition(container, position) {\r\n        var _a, _b;\r\n        for (const [, plugin] of container.plugins) {\r\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\r\n            if (pluginPos !== undefined) {\r\n                return Utils_1.Utils.deepExtend({}, pluginPos);\r\n            }\r\n        }\r\n        const pos = {\r\n            x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\r\n            y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height,\r\n        };\r\n        const outMode = this.particlesOptions.move.outMode;\r\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\r\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\r\n                pos.x -= this.size.value;\r\n            }\r\n            else if (pos.x < this.size.value * 2) {\r\n                pos.x += this.size.value;\r\n            }\r\n        }\r\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\r\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\r\n                pos.y -= this.size.value;\r\n            }\r\n            else if (pos.y < this.size.value * 2) {\r\n                pos.y += this.size.value;\r\n            }\r\n        }\r\n        return pos;\r\n    }\r\n    calculateVelocity() {\r\n        const baseVelocity = Utils_1.Utils.getParticleBaseVelocity(this);\r\n        const res = {\r\n            horizontal: 0,\r\n            vertical: 0,\r\n        };\r\n        const moveOptions = this.particlesOptions.move;\r\n        let rad;\r\n        let radOffset = Math.PI / 4;\r\n        if (typeof moveOptions.angle === \"number\") {\r\n            rad = (Math.PI / 180) * moveOptions.angle;\r\n        }\r\n        else {\r\n            rad = (Math.PI / 180) * moveOptions.angle.value;\r\n            radOffset = (Math.PI / 180) * moveOptions.angle.offset;\r\n        }\r\n        const range = {\r\n            left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\r\n            right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2),\r\n        };\r\n        if (moveOptions.straight) {\r\n            res.horizontal = baseVelocity.x;\r\n            res.vertical = baseVelocity.y;\r\n            if (moveOptions.random) {\r\n                res.horizontal += Utils_1.Utils.randomInRange(range.left, range.right) / 2;\r\n                res.vertical += Utils_1.Utils.randomInRange(range.left, range.right) / 2;\r\n            }\r\n        }\r\n        else {\r\n            res.horizontal = baseVelocity.x + Utils_1.Utils.randomInRange(range.left, range.right) / 2;\r\n            res.vertical = baseVelocity.y + Utils_1.Utils.randomInRange(range.left, range.right) / 2;\r\n        }\r\n        return res;\r\n    }\r\n    loadImageShape(container, drawer) {\r\n        var _a, _b, _c, _d, _e;\r\n        if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\r\n            return;\r\n        }\r\n        const imageDrawer = drawer;\r\n        const images = imageDrawer.getImages(container).images;\r\n        const imageData = this.shapeData;\r\n        const image = (_a = images.find((t) => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\r\n        const color = this.getFillColor();\r\n        let imageRes;\r\n        if (!image) {\r\n            return;\r\n        }\r\n        if (image.svgData !== undefined && imageData.replaceColor && color) {\r\n            const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\r\n            const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\r\n            const domUrl = window.URL || window.webkitURL || window;\r\n            const url = domUrl.createObjectURL(svg);\r\n            const img = new Image();\r\n            imageRes = {\r\n                data: image,\r\n                loaded: false,\r\n                ratio: imageData.width / imageData.height,\r\n                replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\r\n                source: imageData.src,\r\n            };\r\n            img.addEventListener(\"load\", () => {\r\n                if (this.image) {\r\n                    this.image.loaded = true;\r\n                    image.element = img;\r\n                }\r\n                domUrl.revokeObjectURL(url);\r\n            });\r\n            img.addEventListener(\"error\", () => {\r\n                domUrl.revokeObjectURL(url);\r\n                Utils_1.Utils.loadImage(imageData.src).then((img2) => {\r\n                    if (this.image) {\r\n                        image.element = img2.element;\r\n                        this.image.loaded = true;\r\n                    }\r\n                });\r\n            });\r\n            img.src = url;\r\n        }\r\n        else {\r\n            imageRes = {\r\n                data: image,\r\n                loaded: true,\r\n                ratio: imageData.width / imageData.height,\r\n                replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\r\n                source: imageData.src,\r\n            };\r\n        }\r\n        if (!imageRes.ratio) {\r\n            imageRes.ratio = 1;\r\n        }\r\n        const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\r\n        const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\r\n        return {\r\n            image: imageRes,\r\n            fill,\r\n            close,\r\n        };\r\n    }\r\n}\r\nexports.Particle = Particle;\r\n"]},"metadata":{},"sourceType":"script"}